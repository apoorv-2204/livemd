# Untitled notebook

## Section

```elixir
Mix.install([{:mint_web_socket, "~> 1.0"}])
```

```elixir
txn_address = "0000c084b09c60e3bde2d0a81df08b20d82d8b6dfc1d39bc3dfa5e41b731718f09e1"

query =
  "subscription { transactionConfirmed(address: \"#{txn_address}\") { address, nbConfirmations } }"

{:ok, conn} = Mint.HTTP.connect(:http, "localhost", 4_000)
#  |>IO.inspect(label: "1")
{:ok, conn, ref} =
  Mint.WebSocket.upgrade(:ws, conn, "/socket/websocket?vsn=2.0.0", [
    Mint.WebSocket.PerMessageDeflate
  ])

# |> IO.inspect(label: "2")

# 
http_reply_message =
  receive(do: (message -> message))
  |> IO.inspect(label: "3")

{:ok, conn, [{:status, ^ref, status}, {:headers, ^ref, resp_headers}, {:done, ^ref}]} =
  Mint.WebSocket.stream(conn, http_reply_message)
  |> IO.inspect(label: "4")

{:ok, conn, websocket} =
  Mint.WebSocket.new(conn, ref, status, resp_headers)
  |> IO.inspect(label: "5")

{:ok, websocket, data} = Mint.WebSocket.encode(websocket, {:text, query})
{:ok, conn} = Mint.WebSocket.stream_request_body(conn, ref, data)

echo_message =
  receive(do: (message -> message))
  |> IO.inspect(label: "echo_message")

{:ok, conn, [{:data, ^ref, data}]} =
  Mint.WebSocket.stream(conn, echo_message)
  |> IO.inspect(label: "echo_message")

{:ok, websocket, msg} =
  Mint.WebSocket.decode(websocket, data)
  |> IO.inspect(label: "echo_message")

# close code
{:ok, websocket, data} =
  Mint.WebSocket.encode(websocket, :close)
  |> IO.inspect(label: "6")

{:ok, conn} =
  Mint.WebSocket.stream_request_body(conn, ref, data)
  |> IO.inspect(label: "7")

close_response =
  receive(do: (message -> message))
  |> IO.inspect(label: "8")

{:ok, conn, [{:data, ^ref, data}]} =
  Mint.WebSocket.stream(conn, close_response)
  |> IO.inspect(label: "9")

{:ok, websocket, [{:close, 1_000, ""}]} =
  Mint.WebSocket.decode(websocket, data)
  |> IO.inspect(label: "10")

Mint.HTTP.close(conn)
|> IO.inspect(label: "11")
```

```elixir
Mint.HTTP.close("#Port<0.13>")
```
